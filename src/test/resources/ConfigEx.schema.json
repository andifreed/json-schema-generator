{
  "type": "object",
  "id": "test.data.test2.ConfigEx",
  "description": "This is an external representation of the config object.\n  This accepts suppliers for what the objects that the configuration needs.\n  The config object can be initialized via ConfigEx.parse()",
  "properties": {
    "additionalInterceptors": {
      "type": "array",
      "description": "This is a collection of additional interceptors, authentication, tracing will be added as interceptors.",
      "items": {
        "type": "object",
        "id": "test.data.test2.InterceptorSetupEx",
        "additionalProperties": false,
        "properties": {
          "interceptorSupplierClass": {
            "type": "string",
            "$ref": "java.lang.Class",
            "required": true,
            "description": "This is the supplier class, it will be passed the properties to get a RequestInterceptor implementation"
          },
          "properties": {
            "type": "object",
            "description": "This is a map of name/value that will be passed to the supplier",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      }
    },
    "auth": {
      "type": "object",
      "id": "test.data.test2.AuthMethodEx",
      "description": "This is how to authenticate: 'HttpBasic', 'HttpBearer', 'ApiKey', or 'OAuth' are supported, each has specific attributes based on their 'method' property.",
      "oneOf": [ {
        "$ref": "test.data.test2.ApiKeyAuthEx"
      }, {
        "$ref": "test.data.test2.HttpBasicAuthEx"
      }, {
        "$ref": "test.data.test2.HttpBearerAuthEx"
      }, {
        "$ref": "test.data.test2.OAuthEx"
      } ]
    },
    "basePath": {
      "type": "string",
      "description": "This is the base path to the endpoint."
    },
    "eventHandlers": {
      "type": "array",
      "description": "This is the event handlers that should be applied to each request, RetrySetupEx, FallbackSetupEx, CircuitBreakerEx.",
      "items": {
        "type": "object",
        "id": "test.data.test2.EventHandlerSetupEx",
        "oneOf": [ {
          "$ref": "test.data.test2.CircuitBreakerSetupEx"
        }, {
          "$ref": "test.data.test2.FallbackSetupEx"
        }, {
          "$ref": "test.data.test2.RetrySetupEx"
        } ]
      }
    },
    "loggerName": {
      "type": "string",
      "description": "This to override the logger for this end point, i.e., you may want to log different end points to different loggers."
    },
    "mapperSupplierClass": {
      "type": "string",
      "$ref": "java.lang.Class",
      "description": "This is an ObjectMapper, but default the standard mapper is used."
    },
    "ssl": {
      "type": "object",
      "id": "test.data.test2.SSLSetupEx",
      "description": "This is setup information for ssl or tls.",
      "additionalProperties": false,
      "properties": {
        "factorySupplierClass": {
          "type": "string",
          "$ref": "java.lang.Class",
          "required": true,
          "description": "this is a function class that accepts a Map<String,String> and returns an object that implements SSLSocketFactory"
        },
        "hostnameVerifierSupplierClass": {
          "type": "string",
          "$ref": "java.lang.Class",
          "required": true,
          "description": "this is a function class that accepts a Map<String,String> and returns an object that implements HostnameVerifier"
        },
        "properties": {
          "type": "object",
          "description": "this is the map passed to the functions",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "timeout": {
      "type": "object",
      "id": "test.data.test2.TimeoutSetupEx",
      "description": "This is timeout information.",
      "additionalProperties": false,
      "properties": {
        "connectTimeoutMillis": {
          "type": "integer",
          "required": true
        },
        "readTimeoutMillis": {
          "type": "integer",
          "required": true
        }
      }
    },
    "traceActionsClass": {
      "type": "string",
      "$ref": "java.lang.Class",
      "description": "This is whether to deal with trace headers, but default the standards headers are forwarded."
    }
  },
  "definitions": {
    "test.data.test2.ApiKeyAuthEx": {
      "type": "object",
      "id": "test.data.test2.ApiKeyAuthEx",
      "additionalProperties": false,
      "properties": {
        "apiKey": {
          "type": "string",
          "description": "this is value of the parameter.  Note that if credential supplier defined, this value will be requests from it."
        },
        "credentialSupplierSupplierClass": {
          "type": "string",
          "$ref": "java.lang.Class",
          "description": "this is a class that implements Credential supplier.  The supplier can be initialized the with properties below, and will be asked for the value of the paramName, i.e., if paramName is defaulted it will be 'apikey', so the supplier will be asked for 'apikey' value."
        },
        "location": {
          "type": "string",
          "description": "this is where this key belongs: header, parameter, cookie.  Defaults to header",
          "enum": [ "query", "header", "cookie" ]
        },
        "method": {
          "type": "string",
          "description": "this is required to be 'ApiKey', for ApiKeyAuthEx"
        },
        "paramName": {
          "type": "string",
          "description": "this is where the name of the header, parameter or cookie. Default is apikey"
        },
        "properties": {
          "type": "object",
          "description": "this is a map of name/values which will be passed to the CredentialSupplierSupplier to to get a CredentialSupplier.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "test.data.test2.HttpBasicAuthEx": {
      "type": "object",
      "id": "test.data.test2.HttpBasicAuthEx",
      "additionalProperties": false,
      "properties": {
        "credentialSupplierSupplierClass": {
          "type": "string",
          "$ref": "java.lang.Class",
          "description": "this is a class that implements Credential supplier.  The supplier can be initialized the with properties below, and will be asked for the value of the username and password"
        },
        "method": {
          "type": "string",
          "required": true,
          "description": "this is must be 'HttpBasic' to setup a HttpAuthentication"
        },
        "password": {
          "type": "string",
          "description": "This is the password, it can also be supplied by the credential supplier"
        },
        "properties": {
          "type": "object",
          "description": "this is a map of name/values which will be passed to the CredentialSupplierSupplier to to get a CredentialSupplier.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "username": {
          "type": "string",
          "description": "This is the username, it can also be supplied by the credential supplier"
        }
      }
    },
    "test.data.test2.HttpBearerAuthEx": {
      "type": "object",
      "id": "test.data.test2.HttpBearerAuthEx",
      "additionalProperties": false,
      "properties": {
        "bearerToken": {
          "type": "string",
          "description": "This is the token value.  It can also be supplied by the credential supplier."
        },
        "credentialSupplierSupplierClass": {
          "type": "string",
          "$ref": "java.lang.Class",
          "description": "this is a class that implements Credential supplier.  The supplier can be initialized the with properties below, and will be asked for the value of the scheme, i.e., if scheme is defaulted it will be 'bearerToken', so the supplier will be asked for 'bearerToken' value."
        },
        "method": {
          "type": "string",
          "required": true,
          "description": "this is must be 'HttpBearer' to setup a HttpBearerAuth"
        },
        "properties": {
          "type": "object",
          "description": "this is a map of name/values which will be passed to the CredentialSupplierSupplier to to get a CredentialSupplier.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "scheme": {
          "type": "string",
          "description": "This is the authorization scheme, by default 'Bearer'"
        }
      }
    },
    "test.data.test2.OAuthEx": {
      "type": "object",
      "id": "test.data.test2.OAuthEx",
      "additionalProperties": false,
      "properties": {
        "authorizationUrl": {
          "type": "string",
          "description": "this is the url for authorization"
        },
        "credentialSupplierSupplierClass": {
          "type": "string",
          "$ref": "java.lang.Class",
          "description": "this is a class that implements Credential supplier.  The supplier can be initialized the with properties below, and will be asked for the value of the different properties, i.e., username, password, clientSecret, clientId."
        },
        "credentials": {
          "type": "object",
          "id": "test.data.test2.CredentialsEx",
          "description": "this is the Credentials, these values can also be provided by the CredentialProvider",
          "additionalProperties": false,
          "properties": {
            "clientId": {
              "type": "string",
              "description": "this is the client id, this can also be supplied by the credential supplier configured with oath"
            },
            "clientSecret": {
              "type": "string",
              "description": "this is the client secret, this can also be supplied by the credential supplier configured with oath"
            },
            "password": {
              "type": "string",
              "description": "this is the password, this can also be supplied by the credential supplier configured with oath"
            },
            "username": {
              "type": "string",
              "description": "this is the username, this can also be supplied by the credential supplier configured with oath"
            }
          }
        },
        "flow": {
          "type": "string",
          "description": "this is how to implement: values are 'accessCode', 'implicit', 'password', 'application'."
        },
        "method": {
          "type": "string",
          "required": true,
          "description": "this is must be 'OAuth' to configure OAuth authentication"
        },
        "properties": {
          "type": "object",
          "description": "this is a map of name/values which will be passed to the CredentialSupplierSupplier to to get a CredentialSupplier.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "redirectUrl": {
          "type": "string"
        },
        "scopes": {
          "type": "string",
          "description": "this is the authorization scopes requested"
        },
        "tokenStoreClass": {
          "type": "string",
          "$ref": "java.lang.Class",
          "description": "this is store for the transient token, normally it is just kept in the configuration, but you can supply a class to externalize it. This class can also implement AccessTokenListener, and the entire token will be received"
        },
        "tokenUrl": {
          "type": "string",
          "description": "this is the url for token"
        }
      }
    },
    "test.data.test2.CircuitBreakerSetupEx": {
      "type": "object",
      "id": "test.data.test2.CircuitBreakerSetupEx",
      "additionalProperties": false,
      "properties": {
        "automaticTransitionFromOpenToHalfOpenEnabled": {
          "type": "boolean"
        },
        "failureRateThreshold": {
          "type": "number",
          "description": "This is the percentage (n/100) failure threshold, default 50"
        },
        "minimumNumberOfCalls": {
          "type": "integer",
          "description": "Minimum number of calls, no action before this, default 100"
        },
        "name": {
          "type": "string",
          "description": "This is a name for logging"
        },
        "permittedNumberOfCallsInHalfOpenState": {
          "type": "integer",
          "description": "Permitted number of calls in half open, default 10"
        },
        "properties": {
          "type": "object",
          "description": "this is a map of name/values which will be passed to the recordExceptionSupplier to to get the recordException implementation.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "recordExceptionSupplierClass": {
          "type": "string",
          "$ref": "java.lang.Class"
        },
        "slidingWindowSize": {
          "type": "integer",
          "description": "Sliding window size, default 100"
        },
        "slidingWindowType": {
          "type": "string",
          "description": "This is a how to determine the count, default is COUNT_BASED, alternative is TIME_BASED"
        },
        "slowCallDurationThresholdSec": {
          "type": "number",
          "description": "Wait duration, decimal seconds, .5 would be 500 mill seconds, default 60"
        },
        "slowCallRateThreshold": {
          "type": "number",
          "description": "This is the percentage (n/100) failure threshold, default 50"
        },
        "type": {
          "type": "string"
        },
        "waitIntervalFunctionInOpenStateSupplierClass": {
          "type": "string",
          "$ref": "java.lang.Class",
          "description": "This is a supplier for an Interval function, the supplier will be passed the properties below"
        },
        "writableStackTraceEnabled": {
          "type": "boolean",
          "description": "Write stacktrace, default true"
        }
      }
    },
    "test.data.test2.FallbackSetupEx": {
      "type": "object",
      "id": "test.data.test2.FallbackSetupEx",
      "additionalProperties": false,
      "properties": {
        "exceptionHandlerClass": {
          "type": "string",
          "$ref": "java.lang.Class",
          "description": "this is the exception handler class to instantiate, it should be thread safe"
        },
        "exceptionTypes": {
          "type": "array",
          "required": true,
          "description": "this is the exception classes that this fallback deals with",
          "items": {
            "type": "string",
            "$ref": "java.lang.Class"
          }
        },
        "type": {
          "type": "string",
          "required": true,
          "description": "this is must be 'fallback' to setup a FallbackSetup"
        }
      }
    },
    "test.data.test2.RetrySetupEx": {
      "type": "object",
      "id": "test.data.test2.RetrySetupEx",
      "additionalProperties": false,
      "properties": {
        "backoff": {
          "type": "object",
          "id": "test.data.test2.BackoffEx",
          "oneOf": [ {
            "$ref": "test.data.test2.ConstantExponentialBackoffEx"
          }, {
            "$ref": "test.data.test2.RandomExponentialBackoffEx"
          } ]
        },
        "intervalFunctionClass": {
          "type": "string",
          "$ref": "java.lang.Class"
        },
        "maxAttempts": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "retryOnExceptionPredicateClass": {
          "type": "string",
          "$ref": "java.lang.Class"
        },
        "retryOnResultPredicateClass": {
          "type": "string",
          "$ref": "java.lang.Class"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "test.data.test2.ConstantExponentialBackoffEx": {
      "type": "object",
      "id": "test.data.test2.ConstantExponentialBackoffEx",
      "additionalProperties": false,
      "properties": {
        "intervalSecs": {
          "type": "number",
          "description": "This is the back off period, its a duration, json treats this as float seconds. Default is 500 millisecs, which would appear at 0.5."
        },
        "multiplier": {
          "type": "number",
          "description": "this is the back off multiple, default is 1.5"
        },
        "type": {
          "type": "string",
          "required": true,
          "description": "This is required to be 'exponential' for ConstantExponentialBackoffEx"
        }
      }
    },
    "test.data.test2.RandomExponentialBackoffEx": {
      "type": "object",
      "id": "test.data.test2.RandomExponentialBackoffEx",
      "additionalProperties": false,
      "properties": {
        "intervalSecs": {
          "type": "number"
        },
        "multiplier": {
          "type": "number"
        },
        "randomizationFactor": {
          "type": "number"
        },
        "type": {
          "type": "string",
          "required": true,
          "description": "This is required to be 'random' for RandomExponentialBackoffEx"
        }
      }
    }
  }
}